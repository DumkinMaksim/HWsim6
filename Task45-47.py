# С помощью использования лямбд, filter, map, zip, enumerate, list comprehension
# **44. Напишите программу, которая принимает на вход координаты двух точек 
# и находит расстояние между ними в 2D пространстве.

# Пример:

# A (3,6); B (2,1) -> 5,09
# A (7,-5); B (1,-1) -> 7,21

"""
Найти расстояние между двумя точками пространства(числа вводятся через пробел)
"""

import math


# coords = '1 3 2.5 2 5.7 6'

# dist = list(map(lambda x: float(x), coords.split(' ')))

dist = list(map(lambda x: float(x), input("Введите числа через пробел:\n").split(' ')))

def sq(x2, x1): return (x2-x1)**2

print(round(math.sqrt((sq(dist[3], dist[0]) + sq(dist[4], dist[1]) + sq(dist[5], dist[2]))), 2))




# 45. Найти сумму чисел списка стоящих на нечетной позиции
"""
Найти сумму чисел списка стоящих на нечетной позиции
"""
from functools import reduce


lst = [5, 8, 7, 0, 6, -4, 9]

print(reduce(lambda s, i: s+lst[i] if i % 2 else s, range(len(lst)), 0))
# 46. Найти произведение пар чисел списка(парой считаем первый и последний, второй предпоследний и тд)
"""
Найти произведение пар чисел в списке. Парой считаем первый и 
последний элемент, второй и предпоследний и т.д    
"""
lst = [2, 3, 4, 9, 1, 3]
length = len(lst)


print(list(map(lambda i: lst[i] * lst[length - i - 1], range(length // 2 + length % 2))))

# 47.Сформировать список из N членов последовательности
# Для N=5: 1,-3,9,-27,81 (каждый член больше предыдущего в три раза, знак чередуется)

"""
Сформировать список из N членов последовательности.
Для `N = 5: 1, -3, 9, -27, 81` и т.д.
"""

N = int(input("Введите число: "))
print(list(map(lambda x: (-3)**x, range(N))))